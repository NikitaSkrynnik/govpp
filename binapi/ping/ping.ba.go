// Code generated by GoVPP's binapi-generator. DO NOT EDIT.
// versions:
//  binapi-generator: v0.8.0
//  VPP:              23.10-rc0~153-g76d777e10
// source: plugins/ping.api.json

// Package ping contains generated bindings for API file ping.api.
//
// Contents:
// -  2 messages
package ping

import (
	interface_types "github.com/networkservicemesh/govpp/binapi/interface_types"
	ip_types "github.com/networkservicemesh/govpp/binapi/ip_types"
	api "git.fd.io/govpp.git/api"
	codec "go.fd.io/govpp/codec"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the GoVPP api package it is being compiled against.
// A compilation error at this line likely means your copy of the
// GoVPP api package needs to be updated.
const _ = api.GoVppAPIPackageIsVersion2

const (
	APIFile    = "ping"
	APIVersion = "1.0.0"
	VersionCrc = 0xcbf0a3a3
)

// /*
//   - Copyright (c) 2013 Cisco and/or its affiliates.
//   - Licensed under the Apache License, Version 2.0 (the "License");
//   - you may not use this file except in compliance with the License.
//   - You may obtain a copy of the License at:
//     *
//   - http://www.apache.org/licenses/LICENSE-2.0
//     *
//   - Unless required by applicable law or agreed to in writing, software
//   - distributed under the License is distributed on an "AS IS" BASIS,
//   - WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//   - See the License for the specific language governing permissions and
//   - limitations under the License.
//
// MyPingPing defines message 'my_ping_ping'.
type MyPingPing struct {
	Address   ip_types.Address               `binapi:"address,name=address" json:"address,omitempty"`
	SwIfIndex interface_types.InterfaceIndex `binapi:"interface_index,name=sw_if_index" json:"sw_if_index,omitempty"`
	Repeat    uint32                         `binapi:"u32,name=repeat,default=1" json:"repeat,omitempty"`
	Interval  float64                        `binapi:"f64,name=interval,default=1" json:"interval,omitempty"`
}

func (m *MyPingPing) Reset()               { *m = MyPingPing{} }
func (*MyPingPing) GetMessageName() string { return "my_ping_ping" }
func (*MyPingPing) GetCrcString() string   { return "5ccd10cc" }
func (*MyPingPing) GetMessageType() api.MessageType {
	return api.RequestMessage
}

func (m *MyPingPing) Size() (size int) {
	if m == nil {
		return 0
	}
	size += 1      // m.Address.Af
	size += 1 * 16 // m.Address.Un
	size += 4      // m.SwIfIndex
	size += 4      // m.Repeat
	size += 8      // m.Interval
	return size
}
func (m *MyPingPing) Marshal(b []byte) ([]byte, error) {
	if b == nil {
		b = make([]byte, m.Size())
	}
	buf := codec.NewBuffer(b)
	buf.EncodeUint8(uint8(m.Address.Af))
	buf.EncodeBytes(m.Address.Un.XXX_UnionData[:], 16)
	buf.EncodeUint32(uint32(m.SwIfIndex))
	buf.EncodeUint32(m.Repeat)
	buf.EncodeFloat64(m.Interval)
	return buf.Bytes(), nil
}
func (m *MyPingPing) Unmarshal(b []byte) error {
	buf := codec.NewBuffer(b)
	m.Address.Af = ip_types.AddressFamily(buf.DecodeUint8())
	copy(m.Address.Un.XXX_UnionData[:], buf.DecodeBytes(16))
	m.SwIfIndex = interface_types.InterfaceIndex(buf.DecodeUint32())
	m.Repeat = buf.DecodeUint32()
	m.Interval = buf.DecodeFloat64()
	return nil
}

// MyPingPingReply defines message 'my_ping_ping_reply'.
type MyPingPingReply struct {
	Retval       int32  `binapi:"i32,name=retval" json:"retval,omitempty"`
	RequestCount uint32 `binapi:"u32,name=request_count" json:"request_count,omitempty"`
	ReplyCount   uint32 `binapi:"u32,name=reply_count" json:"reply_count,omitempty"`
	IfIndex      uint32 `binapi:"u32,name=if_index" json:"if_index,omitempty"`
	EventType1   uint64 `binapi:"u64,name=event_type1" json:"event_type1,omitempty"`
	EventType2   uint64 `binapi:"u64,name=event_type2" json:"event_type2,omitempty"`
	EventType3   uint64 `binapi:"u64,name=event_type3" json:"event_type3,omitempty"`
	EventType4   uint64 `binapi:"u64,name=event_type4" json:"event_type4,omitempty"`
	PingRes1     uint64 `binapi:"u64,name=ping_res1" json:"ping_res1,omitempty"`
	PingRes2     uint64 `binapi:"u64,name=ping_res2" json:"ping_res2,omitempty"`
	PingRes3     uint64 `binapi:"u64,name=ping_res3" json:"ping_res3,omitempty"`
	PingRes4     uint64 `binapi:"u64,name=ping_res4" json:"ping_res4,omitempty"`
}

func (m *MyPingPingReply) Reset()               { *m = MyPingPingReply{} }
func (*MyPingPingReply) GetMessageName() string { return "my_ping_ping_reply" }
func (*MyPingPingReply) GetCrcString() string   { return "27050fe5" }
func (*MyPingPingReply) GetMessageType() api.MessageType {
	return api.ReplyMessage
}

func (m *MyPingPingReply) Size() (size int) {
	if m == nil {
		return 0
	}
	size += 4 // m.Retval
	size += 4 // m.RequestCount
	size += 4 // m.ReplyCount
	size += 4 // m.IfIndex
	size += 8 // m.EventType1
	size += 8 // m.EventType2
	size += 8 // m.EventType3
	size += 8 // m.EventType4
	size += 8 // m.PingRes1
	size += 8 // m.PingRes2
	size += 8 // m.PingRes3
	size += 8 // m.PingRes4
	return size
}
func (m *MyPingPingReply) Marshal(b []byte) ([]byte, error) {
	if b == nil {
		b = make([]byte, m.Size())
	}
	buf := codec.NewBuffer(b)
	buf.EncodeInt32(m.Retval)
	buf.EncodeUint32(m.RequestCount)
	buf.EncodeUint32(m.ReplyCount)
	buf.EncodeUint32(m.IfIndex)
	buf.EncodeUint64(m.EventType1)
	buf.EncodeUint64(m.EventType2)
	buf.EncodeUint64(m.EventType3)
	buf.EncodeUint64(m.EventType4)
	buf.EncodeUint64(m.PingRes1)
	buf.EncodeUint64(m.PingRes2)
	buf.EncodeUint64(m.PingRes3)
	buf.EncodeUint64(m.PingRes4)
	return buf.Bytes(), nil
}
func (m *MyPingPingReply) Unmarshal(b []byte) error {
	buf := codec.NewBuffer(b)
	m.Retval = buf.DecodeInt32()
	m.RequestCount = buf.DecodeUint32()
	m.ReplyCount = buf.DecodeUint32()
	m.IfIndex = buf.DecodeUint32()
	m.EventType1 = buf.DecodeUint64()
	m.EventType2 = buf.DecodeUint64()
	m.EventType3 = buf.DecodeUint64()
	m.EventType4 = buf.DecodeUint64()
	m.PingRes1 = buf.DecodeUint64()
	m.PingRes2 = buf.DecodeUint64()
	m.PingRes3 = buf.DecodeUint64()
	m.PingRes4 = buf.DecodeUint64()
	return nil
}

func init() { file_ping_binapi_init() }
func file_ping_binapi_init() {
	api.RegisterMessage((*MyPingPing)(nil), "my_ping_ping_5ccd10cc")
	api.RegisterMessage((*MyPingPingReply)(nil), "my_ping_ping_reply_27050fe5")
}

// Messages returns list of all messages in this module.
func AllMessages() []api.Message {
	return []api.Message{
		(*MyPingPing)(nil),
		(*MyPingPingReply)(nil),
	}
}
